// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.2
// source: api/v1/clipboard.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CopyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents string `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *CopyRequest) Reset() {
	*x = CopyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clipboard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyRequest) ProtoMessage() {}

func (x *CopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clipboard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyRequest.ProtoReflect.Descriptor instead.
func (*CopyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clipboard_proto_rawDescGZIP(), []int{0}
}

func (x *CopyRequest) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type CopyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CopyResponse) Reset() {
	*x = CopyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clipboard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyResponse) ProtoMessage() {}

func (x *CopyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clipboard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyResponse.ProtoReflect.Descriptor instead.
func (*CopyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clipboard_proto_rawDescGZIP(), []int{1}
}

type PasteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PasteRequest) Reset() {
	*x = PasteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clipboard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasteRequest) ProtoMessage() {}

func (x *PasteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clipboard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasteRequest.ProtoReflect.Descriptor instead.
func (*PasteRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clipboard_proto_rawDescGZIP(), []int{2}
}

type PasteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents string `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *PasteResponse) Reset() {
	*x = PasteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clipboard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasteResponse) ProtoMessage() {}

func (x *PasteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clipboard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasteResponse.ProtoReflect.Descriptor instead.
func (*PasteResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clipboard_proto_rawDescGZIP(), []int{3}
}

func (x *PasteResponse) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

var File_api_v1_clipboard_proto protoreflect.FileDescriptor

var file_api_v1_clipboard_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x63,
	0x68, 0x69, 0x72, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x22, 0x29, 0x0a, 0x0b, 0x43,
	0x6f, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0xe7, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x04, 0x43, 0x6f, 0x70, 0x79,
	0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x63, 0x68, 0x69, 0x72, 0x70, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x63, 0x68, 0x69, 0x72, 0x70, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6a, 0x0a, 0x05, 0x50, 0x61, 0x73, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65,
	0x6e, 0x2e, 0x63, 0x68, 0x69, 0x72, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x73, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73,
	0x65, 0x6e, 0x2e, 0x63, 0x68, 0x69, 0x72, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x73, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a,
	0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x73, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x69, 0x72, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_clipboard_proto_rawDescOnce sync.Once
	file_api_v1_clipboard_proto_rawDescData = file_api_v1_clipboard_proto_rawDesc
)

func file_api_v1_clipboard_proto_rawDescGZIP() []byte {
	file_api_v1_clipboard_proto_rawDescOnce.Do(func() {
		file_api_v1_clipboard_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_clipboard_proto_rawDescData)
	})
	return file_api_v1_clipboard_proto_rawDescData
}

var file_api_v1_clipboard_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_api_v1_clipboard_proto_goTypes = []interface{}{
	(*CopyRequest)(nil),   // 0: com.github.oclaussen.chirp.api.v1.CopyRequest
	(*CopyResponse)(nil),  // 1: com.github.oclaussen.chirp.api.v1.CopyResponse
	(*PasteRequest)(nil),  // 2: com.github.oclaussen.chirp.api.v1.PasteRequest
	(*PasteResponse)(nil), // 3: com.github.oclaussen.chirp.api.v1.PasteResponse
}
var file_api_v1_clipboard_proto_depIdxs = []int32{
	0, // 0: com.github.oclaussen.chirp.api.v1.ClipboardService.Copy:input_type -> com.github.oclaussen.chirp.api.v1.CopyRequest
	2, // 1: com.github.oclaussen.chirp.api.v1.ClipboardService.Paste:input_type -> com.github.oclaussen.chirp.api.v1.PasteRequest
	1, // 2: com.github.oclaussen.chirp.api.v1.ClipboardService.Copy:output_type -> com.github.oclaussen.chirp.api.v1.CopyResponse
	3, // 3: com.github.oclaussen.chirp.api.v1.ClipboardService.Paste:output_type -> com.github.oclaussen.chirp.api.v1.PasteResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_v1_clipboard_proto_init() }
func file_api_v1_clipboard_proto_init() {
	if File_api_v1_clipboard_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_clipboard_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clipboard_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clipboard_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clipboard_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_clipboard_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_clipboard_proto_goTypes,
		DependencyIndexes: file_api_v1_clipboard_proto_depIdxs,
		MessageInfos:      file_api_v1_clipboard_proto_msgTypes,
	}.Build()
	File_api_v1_clipboard_proto = out.File
	file_api_v1_clipboard_proto_rawDesc = nil
	file_api_v1_clipboard_proto_goTypes = nil
	file_api_v1_clipboard_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClipboardServiceClient is the client API for ClipboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClipboardServiceClient interface {
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	Paste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteResponse, error)
}

type clipboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClipboardServiceClient(cc grpc.ClientConnInterface) ClipboardServiceClient {
	return &clipboardServiceClient{cc}
}

func (c *clipboardServiceClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	out := new(CopyResponse)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.chirp.api.v1.ClipboardService/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipboardServiceClient) Paste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteResponse, error) {
	out := new(PasteResponse)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.chirp.api.v1.ClipboardService/Paste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClipboardServiceServer is the server API for ClipboardService service.
type ClipboardServiceServer interface {
	Copy(context.Context, *CopyRequest) (*CopyResponse, error)
	Paste(context.Context, *PasteRequest) (*PasteResponse, error)
}

// UnimplementedClipboardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClipboardServiceServer struct {
}

func (*UnimplementedClipboardServiceServer) Copy(context.Context, *CopyRequest) (*CopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (*UnimplementedClipboardServiceServer) Paste(context.Context, *PasteRequest) (*PasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paste not implemented")
}

func RegisterClipboardServiceServer(s *grpc.Server, srv ClipboardServiceServer) {
	s.RegisterService(&_ClipboardService_serviceDesc, srv)
}

func _ClipboardService_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipboardServiceServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.chirp.api.v1.ClipboardService/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipboardServiceServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClipboardService_Paste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipboardServiceServer).Paste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.chirp.api.v1.ClipboardService/Paste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipboardServiceServer).Paste(ctx, req.(*PasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClipboardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.oclaussen.chirp.api.v1.ClipboardService",
	HandlerType: (*ClipboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Copy",
			Handler:    _ClipboardService_Copy_Handler,
		},
		{
			MethodName: "Paste",
			Handler:    _ClipboardService_Paste_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/clipboard.proto",
}
